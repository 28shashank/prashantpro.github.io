<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-02-16T10:41:35+05:30</updated><id>/</id><title type="html">All things Java and more</title><subtitle>All things Java SE and Java EE and more | Prashant Padmanabhan</subtitle><author><name>Prashant Padmanabhan</name><email>prashant.pro@gmail.com</email></author><entry><title type="html">Java EE 8 Starter</title><link href="/java/javaee-8-gettingstarted/" rel="alternate" type="text/html" title="Java EE 8 Starter" /><published>2017-09-25T17:40:00+05:30</published><updated>2017-09-25T17:40:00+05:30</updated><id>/java/javaee-8-gettingstarted</id><content type="html" xml:base="/java/javaee-8-gettingstarted/">&lt;p&gt;If you haven’t heard already, then let me share the good news. The long awaited wait for Java EE 8 is finally over, as Oracle has officially released Java EE 8.&lt;/p&gt;

&lt;p&gt;While vendors are yet to release JEE 8 compliant servers, that doesn’t mean we can’t try it out today.
The easiest way to get started is build a maven project which is then deployed to a JEE 8 server such as Glassfish v5 or Payara 5.&lt;/p&gt;

&lt;p&gt;So let’s get started with our first Java EE 8 project, which is going to be a microservice having REST endpoints.&lt;/p&gt;

&lt;h2 id=&quot;maven-project&quot;&gt;Maven project&lt;/h2&gt;

&lt;p&gt;Generate our maven project, which can then be imported in any IDE of your choice.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;➜  &lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;jee8-starter 
➜  &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;jee8-starter
➜  &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; src/main/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;java,resources&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next create a pom.xml file under the project (jee8-starter) which has the below contents:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jee8-starter/pom.xml&lt;/strong&gt; - This is how the pom.xml looks&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
    &amp;lt;groupId&amp;gt;org.prashantp.starter&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jee8-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;
    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;name&amp;gt;jee8-starter&amp;lt;/name&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;maven.compiler.source&amp;gt;1.8&amp;lt;/maven.compiler.source&amp;gt;
        &amp;lt;maven.compiler.target&amp;gt;1.8&amp;lt;/maven.compiler.target&amp;gt;
        &amp;lt;failOnMissingWebXml&amp;gt;false&amp;lt;/failOnMissingWebXml&amp;gt;
    &amp;lt;/properties&amp;gt;
    
    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;javax&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;javaee-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;8.0&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
    
    &amp;lt;build&amp;gt;
        &amp;lt;finalName&amp;gt;jee8-starter&amp;lt;/finalName&amp;gt;
    &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a minimal pom.xml which adds a dependency on Java EE 8.0 API and sets the Java lang source to  SE 8. You may name your project and group/artifact values as desired.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you run &lt;strong&gt;mvn clean install&lt;/strong&gt; on this project it will produce a WAR file in the target directory.&lt;/p&gt;

&lt;p&gt;First thing to do is bootstrap JAXRS and then create our endpoint.&lt;/p&gt;

&lt;p&gt;Here’s the relevant code needed for doing just that.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@ApplicationPath(&quot;resources&quot;)
public class JaxrsActivator extends Application { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we have JAXRS activated under the “resources” URI, we can now go ahead and define a web resource as below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import javax.json.Json;
import javax.json.JsonObject;
import javax.ws.rs.*;

@Path(&quot;servers&quot;)
public class ServerResource {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response get() {
        Runtime runtime = Runtime.getRuntime();
        JsonObject json = Json.createObjectBuilder()
                .add(&quot;processors&quot;, runtime.availableProcessors())
                .add(&quot;memory&quot;, runtime.freeMemory())
                .build();
        
        return Response.ok(json).build();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we have bootstrapped JAXRS and defined a “servers” web resource or endpoint as it’s called.&lt;/p&gt;

&lt;p&gt;Build the project from the project directory &lt;strong&gt;jee8-starter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mvn clean install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This would build our WAR file which can now be deployed on any JEE 8 server!&lt;/p&gt;

&lt;h2 id=&quot;deploying-the-jee-8-war-using-docker&quot;&gt;Deploying the JEE 8 War using docker&lt;/h2&gt;

&lt;p&gt;The easiest option would be to use Docker to experiment with JEE 8 server. Here’s a minimal Dockerfile to deploy our project under Payara 5 micro server.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Dockerfile&lt;/em&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM payara/micro:5-SNAPSHOT

COPY target/jee8-starter.war $DEPLOY_DIR
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To build our maven project and then to build the docker image, we can run it as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;➜  mvn clean &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; jee8-starter .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The above is just combining our two commands of building the maven project followed by issuing the docker build command to create the jee8-starter image.&lt;/p&gt;

&lt;p&gt;To run our docker image we can issue the docker run command as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;➜  docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:8080 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; jee8 jee8-starter&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you have the container running with our microservice, here’s how you can invoke it using “curl” command, which should show you a JSON output.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;➜  ~ curl &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Accept: application/json'&lt;/span&gt; http://localhost:8080/jee8-starter/resources/servers/
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;processors&quot;&lt;/span&gt;:2,&lt;span class=&quot;s2&quot;&gt;&quot;memory&quot;&lt;/span&gt;:153799056&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With that we have our JEE 8 application running on Payara Micro server. You can stop the server by pressing “Ctrl + C”.&lt;/p&gt;

&lt;p&gt;Similarly you can try running the project on &lt;strong&gt;Glassfish v5&lt;/strong&gt; by having the below Dockerfile&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM airhacks/glassfish:v5

COPY target/jee8-starter.war ${DEPLOYMENT_DIR}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The steps to build and run remain the same as before, so you just need to issue the below cmd (Assuming you changed the Dockerfile as shown above).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;➜  mvn clean &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; jee8-glassfish5 .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, run it like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;➜  docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:8080 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; jee8-glassfish jee8-glassfish5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it the URL would be the same as before, that we used for the “curl” command.&lt;/p&gt;

&lt;p&gt;If you followed along, then you saw how easy it can be to run a JEE 8 application of different servers using docker. With that, you should have just enough of a starter project and setup to experiment further on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cheers&lt;/em&gt;&lt;/p&gt;</content><author><name>Prashant Padmanabhan</name><email>prashant.pro@gmail.com</email></author><summary type="html">If you haven’t heard already, then let me share the good news. The long awaited wait for Java EE 8 is finally over, as Oracle has officially released Java EE 8.</summary></entry><entry><title type="html">Structuring Angular and Java projects</title><link href="/angular/java/angular2-javaee-project.1/" rel="alternate" type="text/html" title="Structuring Angular and Java projects" /><published>2017-03-24T17:40:00+05:30</published><updated>2017-03-24T17:40:00+05:30</updated><id>/angular/java/angular2-javaee-project.1</id><content type="html" xml:base="/angular/java/angular2-javaee-project.1/">&lt;h2 id=&quot;frontend-and-backend-setup&quot;&gt;Frontend and Backend setup&lt;/h2&gt;
&lt;p&gt;In the first part, I shared how you would begin setting up an Angular 2 project &lt;a href=&quot;/angular/java/angular2-building-project/&quot;&gt;(Part 1)&lt;/a&gt;.
Before diving further into Angular, let’s structure the codebase so we can work with both frontend and backend.&lt;/p&gt;

&lt;p&gt;Let’s visualize how the communication between Angular and Java would work.
Here there are two popular approaches (1) and (2) each having some pros and cons.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ng_javaee_deployment.png&quot; alt=&quot;Angula and Java Deployed&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We need a way to structure the project such that the decision of picking a deployment strategy can be delayed if not changed as needed later.&lt;/p&gt;

&lt;p&gt;The choice of deployment can be influenced by many factors:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Is the same team going to work on frontend and backend&lt;/li&gt;
  &lt;li&gt;Do we need independent releases of frontent vs backend&lt;/li&gt;
  &lt;li&gt;and so on…&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The goal is to use a structure that’s flexible and in turn allows us to pick either of the deployment choice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let’s see how to use maven to create a multi module project where the frontend and backend are modules.
These can later be worked upon and deployed independent of each other or combined as one release.&lt;/p&gt;

&lt;h3 id=&quot;create-multi-module-project-for-angular-and-jee&quot;&gt;Create Multi module project for Angular and JEE&lt;/h3&gt;

&lt;p&gt;The recommended way to build an Angular 2 application is to make use of Angular CLI tool. 
Similarly when you work with Java EE projects you typically use Maven as the build tool.&lt;/p&gt;

&lt;p&gt;If you have followed along from the earlier part then you must already have the ng-reportapp created under report-viewer.
In case you did, then skip the below and move on to the maven configuration section.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;report-viewer
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;report-viewer
git init .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next lets create the ng-reportapp within the same directory.
We will call it &lt;strong&gt;ng-reportapp&lt;/strong&gt; and use SCSS (Sass enabled) along with routing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ng new ng-reportapp &lt;span class=&quot;nt&quot;&gt;--style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scss &lt;span class=&quot;nt&quot;&gt;--routing&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;maven-configuration&quot;&gt;Maven configuration&lt;/h3&gt;
&lt;p&gt;If you wish to download the setup code then just clone it like below:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone -b report-viewer-01 https://github.com/prashantpro/report-viewer.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you wish to do this manually then follow along.&lt;/p&gt;

&lt;p&gt;Create a pom.xml under report-viewer with the following content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;report-viewer/pom.xml&lt;/strong&gt; - This is the parent pom&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.prashantp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;report-viewer&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;nt&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;ng-reportapp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;jee-report&lt;span class=&quot;nt&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/modules&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The parent pom.xml needs to list both modules. The &lt;strong&gt;first&lt;/strong&gt; module should be the UI (Angular 2) module followed by the Java/Spring module.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, create a pom.xml under ng-reportapp, with the following contents:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.prashantp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;report-viewer&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;ng-reportapp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;nt&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;    
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-clean-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;failOnError&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/failOnError&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;filesets&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;fileset&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;includes&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;include&amp;gt;&lt;/span&gt;dist/**/*.*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/include&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/includes&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;followSymlinks&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/followSymlinks&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/fileset&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filesets&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.codehaus.mojo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;exec-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;angular-cli build&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;workingDirectory&amp;gt;&lt;/span&gt;.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/workingDirectory&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;executable&amp;gt;&lt;/span&gt;ng&lt;span class=&quot;nt&quot;&gt;&amp;lt;/executable&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;arguments&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;argument&amp;gt;&lt;/span&gt;build&lt;span class=&quot;nt&quot;&gt;&amp;lt;/argument&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;argument&amp;gt;&lt;/span&gt;--prod&lt;span class=&quot;nt&quot;&gt;&amp;lt;/argument&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;argument&amp;gt;&lt;/span&gt;--base-href&lt;span class=&quot;nt&quot;&gt;&amp;lt;/argument&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;argument&amp;gt;&lt;/span&gt;/ng-reportapp/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/argument&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/arguments&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;generate-resources&lt;span class=&quot;nt&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;exec&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;–base-href&lt;/em&gt; value used here is “/ng-reportapp”, this is the context under which the Angular App would run.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you run &lt;strong&gt;mvn clean install&lt;/strong&gt; on this project then it will in turn invoke the ng command which would build the ng-reportapp project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s time to create our backend module &lt;strong&gt;jee-report&lt;/strong&gt;, so lets execute the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;report-viewer
mvn archetype:generate &lt;span class=&quot;nt&quot;&gt;-DgroupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;org.prashantp &lt;span class=&quot;nt&quot;&gt;-DartifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jee-report &lt;span class=&quot;nt&quot;&gt;-DarchetypeArtifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;maven-archetype-webapp &lt;span class=&quot;nt&quot;&gt;-DinteractiveMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can replace the generated pom.xml with the below contents.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.prashantp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;report-viewer&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jee-report&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;war&lt;span class=&quot;nt&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;jee-report&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.compiler.target&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.compiler.target&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.compiler.source&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.compiler.source&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;javaee-web-api&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;7.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;jee-report&lt;span class=&quot;nt&quot;&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;src/main/resources&lt;span class=&quot;nt&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-war-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;failOnMissingWebXml&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/failOnMissingWebXml&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;webResources&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- this is relative to the pom.xml directory --&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;../ng-reportapp/dist/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/webResources&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The maven-war-plugin configuration is responsible for copying the Angular output (&lt;strong&gt;dist&lt;/strong&gt; directory) 
and map it into the web application project for the UI part.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Based on what we did so far you should be having the below structure:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cd report-viewer&lt;/strong&gt; (This is the parent POM project)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;report-viewer *$ tree -L 2 -I node_modules
.
├── jee-report
│   ├── pom.xml               -- This is for Java EE module
│   └── src
├── ng-reportapp
│   ├── e2e
│   ├── karma.conf.js
│   ├── package.json
│   ├── pom.xml               -- This is to build NG project using maven
│   ├── protractor.conf.js
│   ├── README.md
│   ├── src
│   ├── tsconfig.json
│   └── tslint.json
└── pom.xml                   -- This is the parent POM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Build the project from the parent directory &lt;strong&gt;report-viewer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mvn clean install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then you will see that first it builds the Angular project then Web Project, while doing the build for the latter it also copies the Angular dist contents into the Web projects root.&lt;/p&gt;

&lt;p&gt;So you get an output similar to the below in the WAR/Web project output directory.&lt;/p&gt;

&lt;p&gt;report-viewer/jee-report/target/jee-report.war&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── favicon.ico
├── index.html
├── index.jsp
├── inline.5f3bf811002370d445df.bundle.js
├── main.cc8715308ebee677bf36.bundle.js
├── META-INF
├── polyfills.f52c146b4f7d1751829e.bundle.js
├── styles.d41d8cd98f00b204e980.bundle.css
├── vendor.dc285188c4ac5c470953.bundle.js
└── WEB-INF
    ├── classes
    └── web.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since our Angular App has the –base-href set at &lt;em&gt;/ng-reportapp&lt;/em&gt; our WAR file must be deployed using this context. The approach of changing the context is specific to the server we use.&lt;/p&gt;

&lt;p&gt;For JBoss/Wildfly this can be done, by creating a &lt;strong&gt;jboss-web.xml&lt;/strong&gt; under WEB-INF folder, with the below content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;lt;?xml &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;?&amp;gt;
&amp;lt;jboss-web&amp;gt;
   &amp;lt;context-root&amp;gt;/ng-reportapp&amp;lt;/context-root&amp;gt;
&amp;lt;/jboss-web&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once deployed the application would be available on this URL: (Assuming defaults)&lt;/p&gt;

&lt;p&gt;http://localhost:8080/ng-reportapp/&lt;/p&gt;

&lt;p&gt;This can now be deployed as a WAR on any JEE web container!&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;We could simply remove the –base-href option from ng-reportapp/pom.xml which would then mean, the app would be available on the root “/” context. So the WAR context should be set accordingly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Given the angular module and java ee modules are independent, these can be built and deployed separately.
For a more cohesive option, we can combine the output of UI (Angular) and bundle it within the war itself.&lt;/p&gt;

&lt;p&gt;We have so far seen how to build an Angular CLI project and how to structure it to work with a backend solution.
Next part, will be about coding the UI components followed by the backend API.&lt;/p&gt;</content><author><name>Prashant Padmanabhan</name><email>prashant.pro@gmail.com</email></author><summary type="html">Frontend and Backend setup In the first part, I shared how you would begin setting up an Angular 2 project (Part 1). Before diving further into Angular, let’s structure the codebase so we can work with both frontend and backend.</summary></entry><entry><title type="html">Angular 2+ with Java EE</title><link href="/angular/java/angular2-building-project/" rel="alternate" type="text/html" title="Angular 2+ with Java EE" /><published>2017-02-19T17:36:00+05:30</published><updated>2017-02-19T17:36:00+05:30</updated><id>/angular/java/angular2-building-project</id><content type="html" xml:base="/angular/java/angular2-building-project/">&lt;h2 id=&quot;getting-started-the-right-way&quot;&gt;Getting started the right way&lt;/h2&gt;
&lt;p&gt;Most of us follow a &lt;em&gt;hello world&lt;/em&gt; sample for even our professional projects that we need to get on with.
The same non production grade code soon becomes a technical debt needing a revisit.
This is my attempt to help those who wish to learn to do things a bit more elegantly when getting started.&lt;/p&gt;

&lt;h2 id=&quot;angular-and-java-beyond-hello-world&quot;&gt;Angular and Java beyond hello world&lt;/h2&gt;
&lt;p&gt;Picking the right tool for the job is not an easy task, with the advent of so many frameworks and libraries for delivering web applications.
Here let us assume you have picked Angular and Java as your choice for the next big thing you are working upon.&lt;/p&gt;

&lt;p&gt;I will be showing you in next few posts the entire process of building a frontend in Angular 2 with TypeScript and the backend in Java EE.&lt;/p&gt;

&lt;p&gt;Angular JS (Angular 2) is a popular framework, you can checkout &lt;a href=&quot;https://www.google.com/trends/explore?q=Angular%202&quot;&gt;Google trends&lt;/a&gt; for reference.
As a developer this can be a great tool in your arsenal!&lt;/p&gt;

&lt;p&gt;Here I go over few of the things which should help you get started the right way (&lt;em&gt;Opinionated&lt;/em&gt;) rather than a quick and dirty example which leaves you wondering whether your starter project is production grade code.&lt;/p&gt;

&lt;h3 id=&quot;what-you-will-be-learning-in-the-next-few-posts-to-follow-this&quot;&gt;What you will be learning in the next few posts to follow this.&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Setting up an Angular 2 Project&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/angular/java/angular2-javaee-project.1/&quot;&gt;Structuring frontend and backend using maven&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Local development&lt;/li&gt;
  &lt;li&gt;Publishing to Apache&lt;/li&gt;
  &lt;li&gt;Third party library integration&lt;/li&gt;
  &lt;li&gt;Using docker for deployment&lt;/li&gt;
  &lt;li&gt;Building the Java EE backend&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wow that’s quite a handful, but that’s what a real life project brings. So don’t get overwhelmed if you are new to this, but stick around to see this project unfold.&lt;/p&gt;

&lt;h2 id=&quot;prerequisite-installation&quot;&gt;Prerequisite installation&lt;/h2&gt;
&lt;p&gt;You need to have Node and NPM installed.&lt;/p&gt;

&lt;p&gt;If its already installed you can try below on your command line to check the versions (note your version may differ, just stick to having the latest).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
4.1.2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
v7.5.0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;There are two widely used methods to start off building your &lt;strong&gt;Angular 2&lt;/strong&gt; project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method 1&lt;/strong&gt;: Checkout a quickstart sample project and build upon it.
Below few lines show the steps to clone quickstart repository using Git and then run “npm install” followed by “npm start” to load the app.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/angular/quickstart.git ng-helloworld
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ng-helloworld
npm &lt;span class=&quot;nb&quot;&gt;install
&lt;/span&gt;npm start&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;The cloning would download some less than 2MB of files.
But the &lt;strong&gt;npm install&lt;/strong&gt; cmd above would bump up the project size over 100 megs due to the node_modules folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With above the site should be running locally at this URL: http://localhost:3000/&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method 2&lt;/strong&gt;: &lt;strong&gt;Preferred&lt;/strong&gt; Use &lt;a href=&quot;https://cli.angular.io/&quot;&gt;Angular CLI&lt;/a&gt;
Below few lines show the steps to setup angular CLI and use it to build and run a new project.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @angular/cli
ng new ng-helloworld
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ng-helloworld
ng serve &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With above the site should be running locally at this URL: http://localhost:4200/&lt;/p&gt;

&lt;p&gt;We will be using &lt;strong&gt;Method 2&lt;/strong&gt; to here (you can follow along with Method 1 as well if you wish).&lt;/p&gt;

&lt;h2 id=&quot;what-are-we-building&quot;&gt;What are we building?&lt;/h2&gt;
&lt;p&gt;The goal is to build a reporting angular app, which should show nice graphical charts.
The data for the charts can come from an external web service running on a Java EE server.
I will cover the Java EE part later, but lets start with the UI in Angular 2 first.&lt;/p&gt;

&lt;p&gt;Below is a screenshot of our finished Angular 2 App.
&lt;img src=&quot;/assets/images/ng_reportapp_project.png&quot; alt=&quot;Report App screenshot will be updated here soon&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Few UI considerations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It would be good to have the UI responsive, so we need &lt;em&gt;Bootstrap&lt;/em&gt; here.&lt;/li&gt;
  &lt;li&gt;Using CSS for styling our components is okay but &lt;em&gt;Sass&lt;/em&gt; is better.&lt;/li&gt;
  &lt;li&gt;We need components and &lt;a href=&quot;http://www.primefaces.org/primeng/&quot;&gt;PrimeNg&lt;/a&gt; would be a great choice as it offers many.&lt;/li&gt;
  &lt;li&gt;A reporting app certainly requires some charts, with PrimeNg we get the chart components too.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you don’t need PrimeNg but still wish to use some Charts then we could also use &lt;a href=&quot;http://valor-software.com/ng2-charts/&quot;&gt;ng2-charts&lt;/a&gt;.
PrimeNg charts are based on Charts.js.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;p&gt;Let’s install angular-cli first. (Ignore if you already have it by following &lt;em&gt;Method 2&lt;/em&gt; above).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @angular/cli&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now create the project by creating a folder called “report-viewer” and initialize Git in that same directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;report-viewer
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;report-viewer
git init .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next lets create the ng-reportapp within the same directory.
We will call it &lt;strong&gt;ng-reportapp&lt;/strong&gt; and use SCSS (Sass enabled) along with routing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ng new ng-reportapp &lt;span class=&quot;nt&quot;&gt;--style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;scss &lt;span class=&quot;nt&quot;&gt;--routing&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The output of ng command would look similar to below:
&lt;img src=&quot;/assets/images/ng_new_reportapp.png&quot; alt=&quot;Angular 2 Project&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now with the project created lets give it a run.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ng-reportapp
ng serve &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With that you should be able to open the URL: http://localhost:4200/ in your browser to view our &lt;a href=&quot;http://localhost:4200&quot;&gt;Report App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ng_cli_project_running.png&quot; alt=&quot;Running on localhost&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you reached this far then congrats, we are now through the setup step and can start building upon this.&lt;/p&gt;

&lt;h2 id=&quot;coding-in-an-editor&quot;&gt;Coding in an editor&lt;/h2&gt;

&lt;p&gt;Use an editor of your choice such as Sublime Text 3 or Visual Studio Code. I recommend using Visual Studio Code, for Angular development as it helps with productivity.&lt;/p&gt;

&lt;p&gt;Installation of VS Code on linux is covered &lt;a href=&quot;https://code.visualstudio.com/docs/setup/linux&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open the project folder in VS Code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In &lt;a href=&quot;/angular/java/angular2-javaee-project.1/&quot;&gt;part 2&lt;/a&gt;, we will start building the UI components and structure the project&lt;/em&gt;&lt;/p&gt;</content><author><name>Prashant Padmanabhan</name><email>prashant.pro@gmail.com</email></author><summary type="html">Getting started the right way Most of us follow a hello world sample for even our professional projects that we need to get on with. The same non production grade code soon becomes a technical debt needing a revisit. This is my attempt to help those who wish to learn to do things a bit more elegantly when getting started.</summary></entry><entry><title type="html">Setup Solus Linux for development</title><link href="/linux/solus/" rel="alternate" type="text/html" title="Setup Solus Linux for development" /><published>2016-02-19T17:36:00+05:30</published><updated>2016-02-19T17:36:00+05:30</updated><id>/linux/solus</id><content type="html" xml:base="/linux/solus/">&lt;p&gt;&lt;strong&gt;Updated for Solus 1.2&lt;/strong&gt; on Dec’16.&lt;/p&gt;

&lt;p&gt;Solus is a Linux operating system and I must say this one is just awesome!
I personally prefer the MATE edition of Solus.&lt;/p&gt;

&lt;p&gt;Here’s what I was looking for and why Solus meets my requirement perfectly.&lt;/p&gt;

&lt;h2 id=&quot;good-looks-combined-with-stability-and-performance&quot;&gt;Good looks combined with stability and performance!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/solus_mate_desktop.png&quot; alt=&quot;Solus 1.2 Mate&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I won’t be reviewing this OS, for that you can checkout Youtube which has a fairly good set of &lt;a href=&quot;https://www.youtube.com/results?search_query=Solus+1.2.1+review&quot;&gt;reviews about this OS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is more about setting up Solus so you can use it as your development machine of choice.&lt;/p&gt;

&lt;p&gt;A fresh installation of Solus Mate 1.2 takes less than 300MB RAM.
Something you may get with Xfce or baseline Arch installation.&lt;/p&gt;

&lt;h2 id=&quot;todo-after-installing-solus-12&quot;&gt;//TODO After installing Solus 1.2&lt;/h2&gt;

&lt;p&gt;You definitely want to check for updates and apply them using the Software Center.&lt;/p&gt;

&lt;p&gt;System -&amp;gt; Administration -&amp;gt; Software Center
&lt;img src=&quot;/assets/images/solus_software_center_updates.png&quot; alt=&quot;Software Center&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://wiki.solus-project.com/3rdParty&quot;&gt;Solus wiki&lt;/a&gt; has some useful links about installing various softwares. Use that for more software bundles that you may need.
I picked few and added few of my own here.&lt;/p&gt;

&lt;h3 id=&quot;make-it-user-friendly&quot;&gt;Make it user friendly&lt;/h3&gt;
&lt;p&gt;Setup &lt;strong&gt;Flash&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;flash-player-nonfree&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Get &lt;strong&gt;Microsoft fonts&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg bi &lt;span class=&quot;nt&quot;&gt;--ignore-safety&lt;/span&gt; https://raw.githubusercontent.com/solus-project/3rd-party/master/desktop/font/mscorefonts/pspec.xml
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg it mscorefonts&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.eopkg&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Setup &lt;strong&gt;Google chrome&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg bi &lt;span class=&quot;nt&quot;&gt;--ignore-safety&lt;/span&gt; https://raw.githubusercontent.com/solus-project/3rd-party/master/network/web/browser/google-chrome-stable/pspec.xml
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg it google-chrome-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.eopkg&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Setup &lt;strong&gt;WPS Office&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg bi &lt;span class=&quot;nt&quot;&gt;--ignore-safety&lt;/span&gt; https://raw.githubusercontent.com/solus-project/3rd-party/master/office/wps-office/pspec.xml
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg it wps-office&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.eopkg&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;make-it-developer-friendly&quot;&gt;Make it developer friendly&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Setup Java&lt;/strong&gt;
Download the latest JDK from Oracle site and put it under /opt.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xf jdk-8u112-linux-x64.tar.gz
&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;jdk1.8.0_112 /opt/
&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-svf&lt;/span&gt; /opt/jdk1.8.0_112/bin/java /usr/bin/java
&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-svf&lt;/span&gt; /opt/jdk1.8.0_112/bin/javac /usr/bin/javac&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you use apache-maven then I suggest you download maven and put it under /opt.&lt;/p&gt;

&lt;p&gt;Maven is present in the repository but it will pull openjdk as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www-eu.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz&quot;&gt;Download maven&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get both maven commands and java working create a file env.sh as shown below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /usr/share/defaults/etc/profile.d/env.sh 
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/jdk1.8.0_112
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;M2_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/apache-maven-3.3.9

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$M2_HOME&lt;/span&gt;/bin:&lt;span class=&quot;nv&quot;&gt;$JAVA_HOME&lt;/span&gt;/bin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Setup Sublime Text and Visual Studio Code&lt;/strong&gt; editors and some nice fonts for source code&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg it sublime-text-3-3126-3-1-x86_64.eopkg
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vscode
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;source-code-pro&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Setup &lt;strong&gt;Git&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Setup &lt;strong&gt;rsync&lt;/strong&gt; if you wish to do any synchronization of data between drives (local/remote)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;rsync&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Solus is mean’t for desktop users and is a fairly new distribution. This is good and bad depending on which camp you belong to. 
As a end user you should be just fine, but as a developer you may need to install certain packages which may not be available in the repositories.&lt;/p&gt;

&lt;p&gt;A good choice no matter which personal OS you use is to make use of Virtual Machines or Containers such as docker.
This allows for doing experiments without breaking your personal OS, by polluting it with various libraries or packages.&lt;/p&gt;

&lt;p&gt;VirtualBox and Vagrant are good choices, but I prefer docker these days.&lt;/p&gt;

&lt;h3 id=&quot;setup-docker&quot;&gt;Setup &lt;strong&gt;docker&lt;/strong&gt;&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;docker &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start docker&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Add your user to docker group so you need not use “sudo” all the time for docker commands:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker prashantp&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Setup docker compose.
docker-compose installation didn’t work for me as is, thus I had to install few additional dependencies to get it working.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;eopkg &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker-compose pyyaml python-jsonschema&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, if you wanted MySQL running locally using docker then here’s how you do that.&lt;/p&gt;

&lt;h3 id=&quot;install-mysql-using-docker&quot;&gt;Install &lt;strong&gt;MySQL using docker&lt;/strong&gt;&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker pull mysql/mysql-server
docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; mysqldock &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;secret &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; mysql/mysql-server&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Connect to MySQL instance&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; mysqldock mysql &lt;span class=&quot;nt&quot;&gt;-uroot&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Shutdown MySQL docker instance and clean up.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker stop mysqldock
docker &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;mysqldock&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;That’s it. You should now have a nice distro all up and running!&lt;/em&gt;&lt;/p&gt;</content><author><name>Prashant Padmanabhan</name><email>prashant.pro@gmail.com</email></author><summary type="html">Updated for Solus 1.2 on Dec’16.</summary></entry><entry><title type="html">Java 8 by example - Part 2</title><link href="/java/java8-by-example-part2/" rel="alternate" type="text/html" title="Java 8 by example - Part 2" /><published>2016-01-18T05:44:00+05:30</published><updated>2016-01-18T05:44:00+05:30</updated><id>/java/java8-by-example-part2</id><content type="html" xml:base="/java/java8-by-example-part2/">&lt;p&gt;This is a follow up on the previous article &lt;a href=&quot;/java/java8-by-example-part1/&quot;&gt;part 1&lt;/a&gt; for Java 8 by example.&lt;/p&gt;

&lt;p&gt;This should be helpful for those who already know java and would like to quickly go over what’s Java 8 all about in &lt;strong&gt;short&lt;/strong&gt; with some examples!&lt;/p&gt;

&lt;h2 id=&quot;lambdas-in-general&quot;&gt;Lambdas in general&lt;/h2&gt;
&lt;p&gt;Lambda expressions can only be used where they will be assigned to a variable whose type is a functional interface.
The Arrow Token “-&amp;gt;” is called the lambda operator.&lt;/p&gt;

&lt;p&gt;A functional interface is simply an interface with a single abstract method.
Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SingleAbstractMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now lambda allows us to define the method above “process” without the need to state the obvious, such as the class declaration and argument type.&lt;/p&gt;

&lt;p&gt;The code would look like below where &lt;strong&gt;msg&lt;/strong&gt; is the variable of type String which is inferred:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SingleAbstractMethod sam = (msg) -&amp;gt; System.out.println(msg);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And we would invoke the method like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sam.process(&quot;testing new message on a SAM&quot;);&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;pre&lt;/em&gt; java 8 way to create a instance from a anonymous inner class here Runnable would be like below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	   &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello anonymous inner class method&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The java 8 &lt;em&gt;lambda&lt;/em&gt; way would look like below where empty parenthesis is used for no-args method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello lambda&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;next-up-using-lambdas&quot;&gt;Next up, using lambdas&lt;/h2&gt;
&lt;p&gt;Here’s a traditional way to sort a collection.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;orange&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Grape&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Case sensitive sort&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Not using lambda&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now if you had to sort the collection in a case insensitive way then this can be done as below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Continued code from above&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\nCase in-sensitive sort&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Not using lambda&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareToIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Print the sorted list using Java 5 introduced for each loop&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now to do it the &lt;strong&gt;java 8&lt;/strong&gt; way which would be a lot more effecient.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;orange&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Grape&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\nCase in-sensitive lambda sort&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareToIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Sort using the above comparator&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//For each using Lambda&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;</content><author><name>Prashant Padmanabhan</name><email>prashant.pro@gmail.com</email></author><summary type="html">This is a follow up on the previous article part 1 for Java 8 by example.</summary></entry><entry><title type="html">Java 8 by example - Part 1</title><link href="/java/java8-by-example-part1/" rel="alternate" type="text/html" title="Java 8 by example - Part 1" /><published>2015-11-20T05:35:00+05:30</published><updated>2015-11-20T05:35:00+05:30</updated><id>/java/java8-by-example-part1</id><content type="html" xml:base="/java/java8-by-example-part1/">&lt;p&gt;This should be helpful for those who already know java and would like to quickly go over what’s Java 8 all about in &lt;strong&gt;short&lt;/strong&gt; with some examples!&lt;/p&gt;

&lt;p&gt;For Lambdas you can checkout &lt;a href=&quot;/java/java8-by-example-part2/&quot;&gt;part 2&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;introducing-class-javautilstringjoiner&quot;&gt;Introducing class &lt;strong&gt;java.util.StringJoiner&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;From the Java Doc for the class:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;StringJoiner is used to construct a sequence of characters separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;API example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; and &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ruby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//output below&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ruby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Lets set a default message to show when no value is set&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; and &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Java&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ruby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lang2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEmptyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No data yet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//output&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;No&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yet&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Working with existing Collection&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Orange&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Grape&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;StringJoiner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringJoiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; and &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//output&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Apple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Grape&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Orange&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;next-up-we-have-the-instant-class-from-javatime-package&quot;&gt;Next up, we have the &lt;strong&gt;Instant&lt;/strong&gt; class from &lt;strong&gt;java.time&lt;/strong&gt; package.&lt;/h2&gt;
&lt;p&gt;From the Java Doc for this class:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An instantaneous point on the time-line.
This class models a single instantaneous point on the time-line. This might be used to record event time-stamps in the application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;between&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;working-with-date-and-time&quot;&gt;Working with Date and time&lt;/h2&gt;

&lt;p&gt;We have &lt;strong&gt;LocalDateTime&lt;/strong&gt; which is “A date-time without a time-zone”. So it can be used to represent
birthdays, an event on a timeline without worrying about the time-zone.&lt;/p&gt;

&lt;p&gt;Also there is the new &lt;strong&gt;DateTimeFormatter&lt;/strong&gt; this is a formatter for printing and parsing date-time objects.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;DateTimeFormatter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTimeFormatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofLocalizedDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormatStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SHORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//output - yours may differ&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//20/11/15 1:52 PM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you find yourself dealing with date-time of various time-zone then your friend is the new &lt;strong&gt;ZonedDateTime&lt;/strong&gt;.
This is a date-time with a time-zone.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;ZonedDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZonedDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZoneId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GMT+0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//output&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//2015-11-20T08:22:27.369Z[GMT]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//20/11/15 8:22 AM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we are to find the difference between the two date time given above then use the below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;between&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//output&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//PT-5H-30M0.039S&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Another example of ZonedDateTime with the help of ZoneId for getting a time-zone based date and time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;ZonedDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;riyadh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZonedDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZoneId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Asia/Riyadh&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;riyadh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//output&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//2015-11-20T12:00:26.666+03:00[Asia/Riyadh]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now how about printing all Zones (ZoneIds) for Asia using the ZoneId and Lambda approach.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;availableZoneIds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZoneId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAvailableZoneIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;availableZoneIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Asia&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have covered briefly on StringJoiner, Using Lambdas, and Working with Date and Time the Java 8 way.&lt;/p&gt;

&lt;p&gt;In the next post I will go over few more Java 8 essentials such as Streams, Default methods and more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;</content><author><name>Prashant Padmanabhan</name><email>prashant.pro@gmail.com</email></author><summary type="html">This should be helpful for those who already know java and would like to quickly go over what’s Java 8 all about in short with some examples!</summary></entry><entry><title type="html">Finding large code files with one command</title><link href="/linux/find-lines-of-code/" rel="alternate" type="text/html" title="Finding large code files with one command" /><published>2015-06-27T05:34:00+05:30</published><updated>2015-06-27T05:34:00+05:30</updated><id>/linux/find-lines-of-code</id><content type="html" xml:base="/linux/find-lines-of-code/">&lt;p&gt;Here’s a quick way to find unusually large files with many lines of code in your codebase.&lt;/p&gt;

&lt;p&gt;While there are many ways to refactor such code it all starts with finding the lengthy files first.
You could use your favorite code analysis tools to do it. But if you are not sure about those then this simple linux command can come handy.&lt;/p&gt;

&lt;p&gt;Here’s the command which will list the top 30 files sorted by number of lines in descending order.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;find src/ &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.java&quot;&lt;/span&gt; | xargs &lt;span class=&quot;nb&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-gr&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-30&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In case you are not sure what the above command does, then here’s how it works:&lt;/p&gt;

&lt;p&gt;We are basically going to combine couple of commands to get to our desired output.&lt;/p&gt;

&lt;p&gt;As an example below command will get the count of lines in one single file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; src/main/java/com/fancyproject/mode/StackViewManager.java&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this command will find all java files.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;find src/ &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.java&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So the entire command works like below:&lt;/p&gt;

&lt;p&gt;The first part of the command finds all files with extension “.java” under the “src” folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;find src/ -name “*.java”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then we pipe that output (file list) using xargs wc -l which finds the number of lines in each file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;xargs wc -l&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then we sort the list by the number of lines using the line count in descending order.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sort -gr&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The last command is to limit the output to top 30&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;head -30&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That’s it, happy refactoring.&lt;/em&gt;&lt;/p&gt;</content><author><name>Prashant Padmanabhan</name><email>prashant.pro@gmail.com</email></author><summary type="html">Here’s a quick way to find unusually large files with many lines of code in your codebase.</summary></entry><entry><title type="html">What problem does Strategy Pattern solve</title><link href="/java/strategy-pattern/" rel="alternate" type="text/html" title="What problem does Strategy Pattern solve" /><published>2015-05-06T11:10:00+05:30</published><updated>2015-05-06T11:10:00+05:30</updated><id>/java/strategy-pattern</id><content type="html" xml:base="/java/strategy-pattern/">&lt;p&gt;There are plenty of articles covering this pattern, here I will try to cover the same from a perspective which I believe has helped me really understand what this pattern has to offer. I will try not to throw the pattern at you with all its rules but instead show you how one would end up using it, while correcting few erroneous design choices on the way.&lt;/p&gt;

&lt;p&gt;One of the major benefits of object oriented programming is code reuse.&lt;/p&gt;

&lt;p&gt;Inheritance is widely used to achieve this reuse, as it allows for defining the common behaviour and properties in a super class which all subclasses then inherit.
BUT the problem with inheritance is with its &lt;strong&gt;&lt;em&gt;overuse&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Check the below example which shows how certain requirement changes can lead to complications in an inheritance based design.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/why-strategy.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;now-lets-look-at-few-of-the-issues-with-inheritance-as-depicted-with-the-above-design-choices&quot;&gt;Now let’s look at few of the issues with inheritance as depicted with the above design choices:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;You can’t change the behavior at runtime.&lt;/li&gt;
  &lt;li&gt;Super class behavior when changed will impact across all subclasses.&lt;/li&gt;
  &lt;li&gt;Not all subclasses may want the behavior of super class thus end up with duplicated code such as empty overrides or their own custom implementations which can’t be reused by other subclasses.&lt;/li&gt;
  &lt;li&gt;With above point, its hard to gain an understanding of all subclass by looking at a super class alone.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;could-interfaces-have-helped&quot;&gt;Could interfaces have helped?&lt;/h3&gt;
&lt;p&gt;It could solve some part of the problem, but would not allow for any reuse of code.
As each implementing subclass would provide their own implementation.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;A more elegant solution can be achieved using a strategy pattern which promotes few design principles as well.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; 
Strategy pattern defines a family of algorithms, encapsulates each one and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see how a revised design using the pattern would make our code much more flexible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/why-strategy-final.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above solution is a lot more flexible and still allows for code reuse!&lt;/p&gt;

&lt;p&gt;Here’s few code snippets of how the pattern appears in Java where subclass can set a different behavior:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//The Abstract Base class&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserAccount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//Default behavior&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountVerification&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmailVerification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActiveCheck&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAccountVerification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccountVerification&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setActiveCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActiveCheck&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//Delegates the verification behavior to the set algorithm&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performVerification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;verifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//Delegates the check behavior to the set algorithm&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performActiveCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAccountActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FreeMember&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserAccount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FreeMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//The behavior is set by default but just to show that we could change it here.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;setAccountVerification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmailVerification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;setActiveCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Guest&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserAccount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Guest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//We need a different Algorithm/Strategy for Verification and ActiveCheck&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;setAccountVerification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoVerification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;setActiveCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GuestActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Cheers!&lt;/em&gt;&lt;/p&gt;</content><author><name>Prashant Padmanabhan</name><email>prashant.pro@gmail.com</email></author><summary type="html">There are plenty of articles covering this pattern, here I will try to cover the same from a perspective which I believe has helped me really understand what this pattern has to offer. I will try not to throw the pattern at you with all its rules but instead show you how one would end up using it, while correcting few erroneous design choices on the way. One of the major benefits of object oriented programming is code reuse. Inheritance is widely used to achieve this reuse, as it allows for defining the common behaviour and properties in a super class which all subclasses then inherit. BUT the problem with inheritance is with its overuse. Check the below example which shows how certain requirement changes can lead to complications in an inheritance based design. Now let’s look at few of the issues with inheritance as depicted with the above design choices: You can’t change the behavior at runtime. Super class behavior when changed will impact across all subclasses. Not all subclasses may want the behavior of super class thus end up with duplicated code such as empty overrides or their own custom implementations which can’t be reused by other subclasses. With above point, its hard to gain an understanding of all subclass by looking at a super class alone. Could interfaces have helped? It could solve some part of the problem, but would not allow for any reuse of code. As each implementing subclass would provide their own implementation. A more elegant solution can be achieved using a strategy pattern which promotes few design principles as well. Definition: Strategy pattern defines a family of algorithms, encapsulates each one and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it. Let’s see how a revised design using the pattern would make our code much more flexible. The above solution is a lot more flexible and still allows for code reuse! Here’s few code snippets of how the pattern appears in Java where subclass can set a different behavior: //The Abstract Base class public class UserAccount { //Default behavior private AccountVerification verifier = new EmailVerification(); private ActiveCheck checker = new MemberActive(); public void setAccountVerification(AccountVerification verifier) { this.verifier = verifier; } public void setActiveCheck(ActiveCheck checker) { this.checker = checker; } //Delegates the verification behavior to the set algorithm public void performVerification() { this.verifier.validate(); } //Delegates the check behavior to the set algorithm public boolean performActiveCheck() { this.checker.isAccountActive(); } } public class FreeMember extends UserAccount { public FreeMember() { //The behavior is set by default but just to show that we could change it here. setAccountVerification(new EmailVerification()); setActiveCheck(new MemberActive()); } } public class Guest extends UserAccount { public Guest() { //We need a different Algorithm/Strategy for Verification and ActiveCheck setAccountVerification(new NoVerification()); setActiveCheck(new GuestActive()); } } Cheers!</summary></entry><entry><title type="html">How to open a SSH tunnel and keep it running in background!</title><link href="/linux/how-to-ssh-tunnel-background/" rel="alternate" type="text/html" title="How to open a SSH tunnel and keep it running in background!" /><published>2015-03-31T05:36:00+05:30</published><updated>2015-03-31T05:36:00+05:30</updated><id>/linux/how-to-ssh-tunnel-background</id><content type="html" xml:base="/linux/how-to-ssh-tunnel-background/">&lt;h2 id=&quot;opening-a-ssh-tunnel&quot;&gt;Opening a ssh tunnel&lt;/h2&gt;

&lt;p&gt;This is more of a quick note which I required for setting up Apache to serve content via a SSH tunnel.&lt;/p&gt;

&lt;p&gt;So lets say we want to connect to a remote machine using SSH and open a tunnel, this we can do as shown in the previous &lt;a href=&quot;/linux/how-to-ssh-linux/&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what if you wanted to open the tunnel and keep it running in the background, so you don’t have to keep the terminal open all the time.
You could probably use other techniques, but this is the one I used.&lt;/p&gt;

&lt;p&gt;Here’s how to do that:&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;ssh -f -N _remote_username@the_remote_server_ip&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The -f option will run the ssh command in the background just before execution. 
Meaning it will allow for entering the password or other inputs before putting it in background.
The -N option will signal that we don’t want to execute any remote commands.
Both options have to be combined to get the desired effect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will return you to the command prompt but still keep the SSH connection and tunnel open.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cheers!&lt;/em&gt;&lt;/p&gt;</content><author><name>Prashant Padmanabhan</name><email>prashant.pro@gmail.com</email></author><summary type="html">Opening a ssh tunnel This is more of a quick note which I required for setting up Apache to serve content via a SSH tunnel. So lets say we want to connect to a remote machine using SSH and open a tunnel, this we can do as shown in the previous post. But what if you wanted to open the tunnel and keep it running in the background, so you don’t have to keep the terminal open all the time. You could probably use other techniques, but this is the one I used. Here’s how to do that: ssh -f -N _remote_username@the_remote_server_ip The -f option will run the ssh command in the background just before execution. Meaning it will allow for entering the password or other inputs before putting it in background. The -N option will signal that we don’t want to execute any remote commands. Both options have to be combined to get the desired effect. This will return you to the command prompt but still keep the SSH connection and tunnel open. Cheers!</summary></entry><entry><title type="html">Using SSH for accessing remote server via a Jump Host and other handy things!</title><link href="/linux/how-to-ssh-linux/" rel="alternate" type="text/html" title="Using SSH for accessing remote server via a Jump Host and other handy things!" /><published>2015-02-19T17:36:00+05:30</published><updated>2015-02-19T17:36:00+05:30</updated><id>/linux/how-to-ssh-linux</id><content type="html" xml:base="/linux/how-to-ssh-linux/">&lt;h2 id=&quot;basic-usage&quot;&gt;Basic usage&lt;/h2&gt;

&lt;p&gt;Lets say you need to connect to a remote Linux server.&lt;/p&gt;

&lt;p&gt;The stand way to connect from terminal:
ssh _remote_username@the_remote_server_ip&lt;/p&gt;

&lt;p&gt;Here, the_remote_server_ip needs to be the IP address or the hostname or the domain name from which the remote server is accessible.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh prashant@192.168.6.50&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should get prompted for a password (passwordless login is possible too, see below), post entering the right credentials you are in.&lt;/p&gt;

&lt;p&gt;You could also write the same command with the -l (that’s lowercase L) argument.&lt;/p&gt;

&lt;p&gt;ssh -l _remote_username the_remote_server_ip&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; prashant 192.168.6.50&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Password-less login using SSH is also possible and allows for much easier (also secure) connection.
When you often have to login/logout of various servers this is a great time saver.&lt;/p&gt;

&lt;p&gt;There’s plenty of information out there about how to do this, just search it in on the web.&lt;/p&gt;

&lt;h3 id=&quot;config-file&quot;&gt;Config file&lt;/h3&gt;

&lt;p&gt;Next, to make repeated access easy, create a “config” file in your ssh directory under your users home directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vi ~/.ssh/config&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Put the following content as an example (replace the IP with your remote server IP and replace the Username with yours).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Host remotebox
  Hostname 192.168.6.50
  User prashant&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With the above config file in place you should be able to now use the below shortcut command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh remotebox

Above is same as this:
ssh prashant@192.168.6.50

If you wanted to use a different name but still use the config style shortuct:
ssh &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; anotherusername remotebox

Above is same as this:
ssh anotherusername@192.168.6.50&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
That’s it, you should now have a easy way to login to your target server from a Jump Host with a lot less to type.
As an added advantage you can now access Ports of target server locally. All you need is an &lt;em&gt;active&lt;/em&gt; connection to the target done via ssh.&lt;/p&gt;

&lt;h2 id=&quot;jump-server&quot;&gt;Jump Server&lt;/h2&gt;

&lt;p&gt;Now, with some basics covered here’s what we are trying to do:
You need to access a production server which is behind a firewall (Can’t ssh directly to the server).
But there is a Jump server available.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jump Server:
A machine that you need to connect to first then only from this machine you can SSH into the remote server.
Jump servers are used to protect the other servers from direct access. 
It would typically be in DMZ while the other servers are in a secure zone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now this means you have to &lt;em&gt;first&lt;/em&gt; ssh into the Jump server then from that machine ssh &lt;em&gt;again&lt;/em&gt; to the target server.&lt;/p&gt;

&lt;p&gt;To make it easier to login with a single command edit the ~/.ssh/.config file entry like below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Host productionbox
  Hostname 10.10.19.20
  User admin
  ProxyCommand ssh &lt;span class=&quot;nt&quot;&gt;-W&lt;/span&gt; %h:%p prashant@192.168.6.50&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Here Hostname with 10.10.19.20 is assumed to be the target server IP.&lt;/li&gt;
  &lt;li&gt;The User denotes the remote user on the target server, here admin.&lt;/li&gt;
  &lt;li&gt;ProxyCommand has the user and IP of the Jump Server, like prashant@192.168.6.50.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;port-forwarding-with-jump-server&quot;&gt;Port Forwarding with Jump Server&lt;/h3&gt;
&lt;p&gt;What if you also wanted to be able to do Port Forwarding.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A technique which will allow you to access the target machines Port
from your local machine. Given that its blocked from all but allowed only from the Jump Server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You simply need to add a LocalForward entry to your config like below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Host productionbox
  Hostname 10.10.19.20
  User admin
  ProxyCommand ssh &lt;span class=&quot;nt&quot;&gt;-W&lt;/span&gt; %h:%p prashant@192.168.6.50
  LocalForward 8080 127.0.0.1:8080&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh productionbox&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once connected any data sent to the local IP:PORT (127.0.0.1 8080) will be directed to the productionbox target server.
(Port on Local machine and target can be different).&lt;/p&gt;

&lt;p&gt;At times the setup can get complicated and you may need to hop between multiple Jump server to reach the target server.
This can be done via &lt;em&gt;ProxyCommand&lt;/em&gt; chaining like below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Host jump_box
  Hostname 192.168.6.50
  User prashant
  
Host production_box
  Hostname 10.10.19.20
  User admin
  ProxyCommand ssh &lt;span class=&quot;nt&quot;&gt;-W&lt;/span&gt; %h:%p jump_box

Host production_db_box
  Hostname 10.10.19.23
  User admin
  ProxyCommand ssh &lt;span class=&quot;nt&quot;&gt;-W&lt;/span&gt; %h:%p production_box
  LocalForward 3306 127.0.0.1:3306

&lt;span class=&quot;c&quot;&gt;#Next on command line you can&lt;/span&gt;
ssh production_db_box&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;things-you-may-find-handy&quot;&gt;Things you may find handy&lt;/h2&gt;
&lt;p&gt;You can execute a command on the remote machine without leaving your machine (shell), the command gets executed remotely and your connection is closed post that.&lt;/p&gt;

&lt;p&gt;For being concise I’m using my config file as shortcut for ssh, you could substitue the standard &lt;em&gt;ssh user@remotebox&lt;/em&gt; as needed.&lt;/p&gt;

&lt;p&gt;The below would connect to the remote machine then execute “df -h” on it and display the available and total space on the remote machine as ouput to your terminal.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh remotebox &lt;span class=&quot;s2&quot;&gt;&quot;df -h&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
A more advance usage, could be where you need to connect to a MySQL Slave server to check the Slave Running status as below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh mysqlslave_server &lt;span class=&quot;s2&quot;&gt;&quot;mysql -u admin -p secret -e 'show slave status&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\G&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' | grep Slave_SQL_Running:&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
If you wanted to have some interaction with the remote command before exiting you can do so with “-t” option.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; remotebox &lt;span class=&quot;s2&quot;&gt;&quot;top&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
Lets say we want to execute multiple commands on the remote machine.
The below would create a file test.txt in the logged in users home directory then do a listing via the ls -l command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh remotebox &lt;span class=&quot;s2&quot;&gt;&quot;touch test.txt; ls -l&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Cheers!&lt;/em&gt;&lt;/p&gt;</content><author><name>Prashant Padmanabhan</name><email>prashant.pro@gmail.com</email></author><summary type="html">Basic usage Lets say you need to connect to a remote Linux server. The stand way to connect from terminal: ssh _remote_username@the_remote_server_ip Here, the_remote_server_ip needs to be the IP address or the hostname or the domain name from which the remote server is accessible. Example: ssh prashant@192.168.6.50 You should get prompted for a password (passwordless login is possible too, see below), post entering the right credentials you are in. You could also write the same command with the -l (that’s lowercase L) argument. ssh -l _remote_username the_remote_server_ip Example: ssh -l prashant 192.168.6.50 Password-less login using SSH is also possible and allows for much easier (also secure) connection. When you often have to login/logout of various servers this is a great time saver. There’s plenty of information out there about how to do this, just search it in on the web. Config file Next, to make repeated access easy, create a “config” file in your ssh directory under your users home directory. vi ~/.ssh/config Put the following content as an example (replace the IP with your remote server IP and replace the Username with yours). Host remotebox Hostname 192.168.6.50 User prashant With the above config file in place you should be able to now use the below shortcut command: ssh remotebox Above is same as this: ssh prashant@192.168.6.50 If you wanted to use a different name but still use the config style shortuct: ssh -l anotherusername remotebox Above is same as this: ssh anotherusername@192.168.6.50 That’s it, you should now have a easy way to login to your target server from a Jump Host with a lot less to type. As an added advantage you can now access Ports of target server locally. All you need is an active connection to the target done via ssh. Jump Server Now, with some basics covered here’s what we are trying to do: You need to access a production server which is behind a firewall (Can’t ssh directly to the server). But there is a Jump server available. Jump Server: A machine that you need to connect to first then only from this machine you can SSH into the remote server. Jump servers are used to protect the other servers from direct access. It would typically be in DMZ while the other servers are in a secure zone. Now this means you have to first ssh into the Jump server then from that machine ssh again to the target server. To make it easier to login with a single command edit the ~/.ssh/.config file entry like below: Host productionbox Hostname 10.10.19.20 User admin ProxyCommand ssh -W %h:%p prashant@192.168.6.50 Here Hostname with 10.10.19.20 is assumed to be the target server IP. The User denotes the remote user on the target server, here admin. ProxyCommand has the user and IP of the Jump Server, like prashant@192.168.6.50. Port Forwarding with Jump Server What if you also wanted to be able to do Port Forwarding. A technique which will allow you to access the target machines Port from your local machine. Given that its blocked from all but allowed only from the Jump Server. You simply need to add a LocalForward entry to your config like below: Host productionbox Hostname 10.10.19.20 User admin ProxyCommand ssh -W %h:%p prashant@192.168.6.50 LocalForward 8080 127.0.0.1:8080 Now ssh productionbox Once connected any data sent to the local IP:PORT (127.0.0.1 8080) will be directed to the productionbox target server. (Port on Local machine and target can be different). At times the setup can get complicated and you may need to hop between multiple Jump server to reach the target server. This can be done via ProxyCommand chaining like below: Host jump_box Hostname 192.168.6.50 User prashant Host production_box Hostname 10.10.19.20 User admin ProxyCommand ssh -W %h:%p jump_box Host production_db_box Hostname 10.10.19.23 User admin ProxyCommand ssh -W %h:%p production_box LocalForward 3306 127.0.0.1:3306 #Next on command line you can ssh production_db_box Things you may find handy You can execute a command on the remote machine without leaving your machine (shell), the command gets executed remotely and your connection is closed post that. For being concise I’m using my config file as shortcut for ssh, you could substitue the standard ssh user@remotebox as needed. The below would connect to the remote machine then execute “df -h” on it and display the available and total space on the remote machine as ouput to your terminal. ssh remotebox &quot;df -h&quot; A more advance usage, could be where you need to connect to a MySQL Slave server to check the Slave Running status as below: ssh mysqlslave_server &quot;mysql -u admin -p secret -e 'show slave status\G' | grep Slave_SQL_Running:&quot; If you wanted to have some interaction with the remote command before exiting you can do so with “-t” option. ssh -t remotebox &quot;top&quot; Lets say we want to execute multiple commands on the remote machine. The below would create a file test.txt in the logged in users home directory then do a listing via the ls -l command. ssh remotebox &quot;touch test.txt; ls -l&quot; Cheers!</summary></entry></feed>